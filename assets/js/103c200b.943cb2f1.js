"use strict";(self.webpackChunkworkshop_pairprogramming_site=self.webpackChunkworkshop_pairprogramming_site||[]).push([[6658],{4742:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"glossary/kata","title":"Kata","description":"A programming exercise, often repetitive, designed to improve skill and problem-solving techniques. Commonly used in coding dojos, it builds muscle memory for solving coding problems.","source":"@site/docs/glossary/kata.md","sourceDirName":"glossary","slug":"/glossary/kata","permalink":"/docs/glossary/kata","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Hinge Pairing","permalink":"/docs/glossary/hinge_pairing"},"next":{"title":"Knowledge Silo","permalink":"/docs/glossary/knowledge_silo"}}');var r=i(4848),n=i(8453);const o={},s="Kata",l={},c=[{value:"Historical Context",id:"historical-context",level:2},{value:"Pedagogical Design",id:"pedagogical-design",level:2},{value:"Practice Methodologies",id:"practice-methodologies",level:2},{value:"Further reading",id:"further-reading",level:2}];function d(e){const t={a:"a",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"kata",children:"Kata"})}),"\n",(0,r.jsx)(t.p,{children:"A programming exercise, often repetitive, designed to improve skill and problem-solving techniques. Commonly used in coding dojos, it builds muscle memory for solving coding problems."}),"\n",(0,r.jsx)(t.h2,{id:"historical-context",children:"Historical Context"}),"\n",(0,r.jsx)(t.p,{children:"The kata concept originated in Japanese martial arts as a sequence of precisely defined movements practiced repeatedly to develop muscle memory and perfect technique. Software development adopted this concept in the early 2000s as part of the broader software craftsmanship movement, which sought to emphasize deliberate practice and skill development. Influential developers like Dave Thomas popularized programming katas as a way to develop technical fluency and internalize fundamental patterns through repetition. The approach gained significant traction within test-driven development communities, where katas provided an ideal vehicle for practicing the red-green-refactor cycle in a controlled environment before applying these techniques to more complex production challenges."}),"\n",(0,r.jsx)(t.h2,{id:"pedagogical-design",children:"Pedagogical Design"}),"\n",(0,r.jsx)(t.p,{children:"Well-designed katas incorporate specific pedagogical elements that maximize their effectiveness as learning tools. The best katas feature carefully calibrated complexity \u2013 simple enough to be completed in a single practice session but complex enough to require thoughtful problem-solving rather than mechanical implementation. They typically contain deliberate constraints that force practitioners to apply specific techniques or patterns, creating focused practice opportunities for particular skills. Effective katas also incorporate progressively revealing requirements that simulate the evolving nature of real-world software development, teaching developers to create flexible designs that accommodate change. Many kata libraries organize exercises into skill progression paths, allowing developers to systematically build capabilities through sequences of related challenges of increasing difficulty."}),"\n",(0,r.jsx)(t.h2,{id:"practice-methodologies",children:"Practice Methodologies"}),"\n",(0,r.jsx)(t.p,{children:'Developers employ various practice methodologies to maximize the learning benefits derived from kata exercises. The "repeated solution" approach involves solving the same kata multiple times using different constraints, languages, or paradigms to develop adaptability and highlight the trade-offs between different approaches. The "deletion practice" technique requires deleting the solution after completion and re-implementing it from scratch, strengthening memory and understanding rather than relying on code review. More advanced practitioners use "teaching katas" where they solve familiar exercises while verbalizing their thinking process for others, deepening their own understanding while transferring knowledge. Research suggests that interleaving different katas rather than repeatedly practicing just one creates more robust learning by forcing practitioners to select appropriate techniques rather than simply applying the same approach by rote.'}),"\n",(0,r.jsx)(t.h2,{id:"further-reading",children:"Further reading"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://github.com/gamontal/awesome-katas",children:"GitHub - gamontal/awesome-katas: A curated list of code katas"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://dl.acm.org/doi/fullHtml/10.1145/3593663.3593694",children:"Using Architectural Kata in Software Architecture Course: An Experience Report"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://www.codewars.com/kata/search/",children:"Kata Practice - Codewars"})}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,t,i)=>{i.d(t,{R:()=>o,x:()=>s});var a=i(6540);const r={},n=a.createContext(r);function o(e){const t=a.useContext(n);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(n.Provider,{value:t},e.children)}}}]);
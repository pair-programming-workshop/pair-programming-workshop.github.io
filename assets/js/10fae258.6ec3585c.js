"use strict";(self.webpackChunkworkshop_pairprogramming_site=self.webpackChunkworkshop_pairprogramming_site||[]).push([[1833],{53:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"glossary/test_first_pairing","title":"Test-First Pairing","description":"A practice where one partner writes a test that intentionally fails, and the other writes code to pass it. This is a form of Test-Driven Development (TDD), encouraging rigorous, quality-focused development.","source":"@site/docs/glossary/test_first_pairing.md","sourceDirName":"glossary","slug":"/glossary/test_first_pairing","permalink":"/docs/glossary/test_first_pairing","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Synergies in Pair Programming","permalink":"/docs/glossary/synergies_in_pair_programming"},"next":{"title":"YAGNI (You Aren\'t Gonna Need It)","permalink":"/docs/glossary/yagni"}}');var s=i(4848),a=i(8453);const r={},o="Test-First Pairing",l={},c=[{value:"Cognitive Benefits",id:"cognitive-benefits",level:2},{value:"Role Dynamics",id:"role-dynamics",level:2},{value:"Learning Applications",id:"learning-applications",level:2}];function p(e){const t={h1:"h1",h2:"h2",header:"header",p:"p",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"test-first-pairing",children:"Test-First Pairing"})}),"\n",(0,s.jsx)(t.p,{children:"A practice where one partner writes a test that intentionally fails, and the other writes code to pass it. This is a form of Test-Driven Development (TDD), encouraging rigorous, quality-focused development."}),"\n",(0,s.jsx)(t.h2,{id:"cognitive-benefits",children:"Cognitive Benefits"}),"\n",(0,s.jsx)(t.p,{children:"Test-first pairing creates distinct cognitive benefits by combining the structured thinking of test-driven development with the collaborative advantages of pair programming. The approach leverages the psychology of constructive constraints, where the intentional limitation of writing tests before implementation paradoxically enhances creative problem-solving by focusing attention on desired outcomes rather than implementation details. Pairs practicing this approach report higher clarity about requirements and acceptance criteria before writing production code, reducing wasted effort on implementations that don't actually satisfy business needs. The alternating test-code dynamic creates natural role separation that ensures both partners remain actively engaged, as each knows they'll soon need to respond to the other's contribution in a continuous intellectual dialogue."}),"\n",(0,s.jsx)(t.h2,{id:"role-dynamics",children:"Role Dynamics"}),"\n",(0,s.jsx)(t.p,{children:"The role dynamics in test-first pairing differ significantly from traditional driver-navigator arrangements, creating unique collaboration patterns that enhance code quality. The test author assumes responsibility for defining clear expectations and success criteria, effectively taking a requirements-focused perspective that ensures implementation will satisfy actual needs rather than assumed functionality. The implementation author takes responsibility for finding the simplest, most maintainable solution that satisfies the defined tests, often identifying edge cases or requirement ambiguities that weren't apparent until implementation began. This natural tension between specification and implementation creates a productive dialectic where each role keeps the other honest, preventing both overly complex tests and fragile implementations that merely pass tests without delivering robust solutions."}),"\n",(0,s.jsx)(t.h2,{id:"learning-applications",children:"Learning Applications"}),"\n",(0,s.jsx)(t.p,{children:"Test-first pairing provides powerful learning applications for both technical skills development and team culture building across various experience levels. For novice developers, the approach creates a structured entry point to both testing disciplines and collaborative development, with the test-writing role offering a concrete way to contribute even before developing implementation expertise. Experienced developers benefit from the approach's ability to surface implicit knowledge and assumptions, as articulating testable expectations often reveals different mental models of how systems should behave. Organizations introducing quality-focused methodologies often begin with test-first pairing specifically because it makes testing practices visible and collaborative, helping teams internalize testing as a design activity rather than merely a verification step."})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},8453:(e,t,i)=>{i.d(t,{R:()=>r,x:()=>o});var n=i(6540);const s={},a=n.createContext(s);function r(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);